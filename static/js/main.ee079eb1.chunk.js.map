{"version":3,"sources":["dal/todolists-api.ts","endpoints/index.ts","dal/login-api.ts","state/reducers/auth-reducer.ts","state/reducers/app-reducer.ts","utils/error-utils.ts","state/reducers/task-reducer.ts","state/reducers/todolist-reducer.ts","state/reducers.ts","state/store.ts","components/AddItemForm/index.tsx","components/EditableSpan/index.tsx","utils/redux-utils.ts","state/hooks/useActions.ts","features/Todolists/Todolist/Task/index.tsx","consts/index.ts","features/Todolists/Todolist/index.tsx","features/Todolists/index.tsx","components/ErrorSnackbar/index.tsx","features/Todolists/Login/index.tsx","features/Progress/index.tsx","app/App.tsx","hooks/useProgress.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","login","auth","todo","instance","axios","create","baseURL","process","withCredentials","headers","String","todolistApi","get","title","post","todolistId","delete","put","taskId","model","authApi","dataLogin","loginUser","createAsyncThunk","param","thunkAPI","a","dispatch","setAppStatus","status","result","data","resultCode","handleAsuncServerAppError","handleAsuncServerNetworkError","loguotUser","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","selectIsLoggedIn","authActions","logoutUser","initializeApp","error","isInitialized","setAppError","setAppInitialized","appReducer","selectStatus","app","selectIsInitialized","appActions","showError","messages","length","rejectWithValue","errors","fieldsErrors","fieldsError","message","undefined","fetchTasks","res","tasks","items","deletTask","id","addTask","item","updateTask","getState","task","find","t","apiModel","description","priority","startDate","deadline","domainModel","taskReducer","todolistsActions","addTodolist","todolist","fetchTodolist","forEach","removeTodolist","index","findIndex","splice","todoListId","unshift","selectTask","tasksActions","tl","changeTodolistEntityStatus","changeTodolistTitle","changeTodolistFilter","filter","entityStatus","map","todolistReducer","selectTodolsts","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","AddItemForm","React","memo","props","addItem","disabled","useState","setTitle","setError","addNewItem","useCallback","trim","blurHandler","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","variant","helperText","onBlur","IconButton","onClick","color","style","marginLeft","EditableSpan","editMode","setEditMode","newTitle","setNewTitle","activateViewMode","autoFocus","onDoubleClick","useAppDispatch","useDispatch","useActions","dispath","useMemo","bindActionCreators","Task","deletingUnnecessaryTask","onChangeHandler","newIsDoneValue","checked","Completed","New","onChangeTaskTitle","className","position","Checkbox","sx","pink","size","top","right","fontSize","someError","Todolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addNewTask","helper","resultAction","rejected","match","errorMessage","getTasksForTodoList","replaceNewTitleTodolist","deleteTodolist","newTasks","renderFilterButton","buttonFilter","text","outlined","additionalOption","varian","Button","Paper","elevation","padding","marginBottom","TodolistList","useSelector","todolists","addTodolistCallback","useEffect","Grid","container","spacing","flexWrap","overflowX","paddingRight","allTodolistTasks","width","to","Alert","forwardRef","ref","Snackbars","handleClose","event","reason","isOpen","Stack","Snackbar","open","autoHideDuration","onClose","severity","Login","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","setFieldError","field","handleSubmit","getFieldProps","justifyContent","FormControl","FormLabel","href","target","rel","FormGroup","margin","type","FormControlLabel","control","CircularProgressWithLabel","Box","display","CircularProgress","left","bottom","alignItems","Typography","component","Math","round","App","progress","setProgress","timer","setInterval","prevProgress","clearInterval","useProgress","AppBar","Toolbar","edge","mr","flexGrow","LinearProgress","Container","fixed","path","element","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee079eb1.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport {baseURL, key, todo} from \"../endpoints\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: baseURL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': String(key),\r\n    },\r\n});\r\n\r\nexport const todolistApi = {\r\n    getTodo() {\r\n        return instance.get<TodolistType[]>(todo)\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TodolistType }>>>(todo, { title })\r\n    },\r\n    deletTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`${todo}/${ todolistId }`)\r\n    },\r\n    updateTodo(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<CommonResponseType<{ item: TodolistType }>>>(`${todo}/${ todolistId }`, { title })\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${ todolistId }/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TaskType }>>>(`todo-lists/${ todolistId }/tasks`, { title })\r\n    },\r\n    deletTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${ todolistId }/tasks/${ taskId }`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<{},\r\n            AxiosResponse<CommonResponseType<TaskType>>>(`todo-lists/${ todolistId }/tasks/${ taskId }`, model)\r\n    },\r\n};\r\n\r\nexport type FieldErrorType = {\r\n    field: string,\r\n    error: string, \r\n}\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsError?: FieldErrorType[],\r\n    data: T,\r\n}\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null,\r\n    totalCount: number,\r\n    items: TaskType[],\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string,\r\n    // entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n}\r\n\r\nexport type RequestStatusType = 'loading' | 'idle' | 'succeeded' | 'failed';","\r\n\r\nexport const login = '/login';\r\nexport const home = '/';\r\n\r\nexport const auth = 'auth/login';\r\nexport const me = 'auth/me';\r\n\r\nexport const todo = 'todo-lists';\r\n\r\nexport const baseURL = process.env.REACT_APP_BASE_URL_TODO;\r\nexport const key = process.env.REACT_APP_API_KEY;","import {CommonResponseType, instance} from './todolists-api';\r\nimport {AxiosResponse} from 'axios';\r\nimport {auth, me} from \"../endpoints\";\r\n\r\n\r\nexport const authApi = {\r\n  login(dataLogin: LoginParamsType) {\r\n    return instance.post<{}, AxiosResponse<CommonResponseType<{userId?: number}>>>(auth, dataLogin)\r\n  },\r\n  logout(){\r\n    return instance.delete<{}, AxiosResponse<CommonResponseType<{userId?: number}>>>(auth)\r\n  },\r\n  me(){\r\n    return instance.get<{}, AxiosResponse<CommonResponseType<{id: number, email: string, login: string}>>>(me)\r\n  },\r\n};\r\n \r\nexport type LoginParamsType = {\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha?: string,\r\n};\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nimport {setAppStatus} from './app-reducer';\r\nimport {authApi, LoginParamsType} from '../../dal/login-api';\r\n\r\nimport {handleAsuncServerAppError, handleAsuncServerNetworkError} from '../../utils/error-utils';\r\nimport {AppRootStateType, ThunkError} from '../types';\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n};\r\n\r\nexport const loginUser = createAsyncThunk<\r\n  undefined,\r\n  {dataLogin: LoginParamsType},\r\n  ThunkError\r\n>('auth/loginUser', async (param, thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n  try\r\n  {\r\n    const result = await authApi.login(param.dataLogin)\r\n    if (result.data.resultCode === 0)\r\n    {\r\n      return;\r\n    } else\r\n    {\r\n      return handleAsuncServerAppError(result.data, thunkAPI);\r\n    }\r\n  } catch (error: any)\r\n  {\r\n    return handleAsuncServerNetworkError(error, thunkAPI);\r\n  } finally\r\n  {\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}));\r\n  }\r\n\r\n});\r\nexport const loguotUser = createAsyncThunk<\r\n  undefined,\r\n  undefined,\r\n  ThunkError\r\n>('auth/loguotUser', async (param, thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n  try\r\n  {\r\n    const result = await authApi.logout();\r\n    if (result.data.resultCode === 0)\r\n    {\r\n      thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n      return;\r\n    } else\r\n    {\r\n      return handleAsuncServerAppError(result.data, thunkAPI);\r\n    }\r\n  } catch (error: any)\r\n  {\r\n    return handleAsuncServerNetworkError(error, thunkAPI);\r\n  } finally\r\n  {\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}));\r\n  }\r\n\r\n});\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedIn(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n      state.isLoggedIn = action.payload.isLoggedIn;\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(loginUser.fulfilled, (state) => {\r\n      state.isLoggedIn = !state.isLoggedIn;\r\n    })\r\n      .addCase(loguotUser.fulfilled, (state) => {\r\n        state.isLoggedIn = !state.isLoggedIn;\r\n      })\r\n  },\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedIn} = slice.actions;\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n\r\nexport const authActions = {loginUser, logoutUser: loguotUser, ...slice.reducer}\r\n\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nimport {authApi} from '../../dal/login-api';\r\nimport {setIsLoggedIn} from './auth-reducer';\r\n\r\nimport {handleAsuncServerNetworkError, handleAsuncServerAppError} from '../../utils/error-utils';\r\nimport {AppRootStateType, ThunkError} from '../types';\r\n\r\ntype InitialStateType = {\r\n  status: RequestStatusType,\r\n  error: string | null,\r\n  isInitialized: boolean,\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  error: null,\r\n  status: 'idle',\r\n  isInitialized: false,\r\n};\r\n\r\nexport const initializeApp = createAsyncThunk<\r\n undefined,\r\n undefined,\r\n ThunkError\r\n>('app/initializeApp', async (param, thunkAPI) => {\r\n  // thunkAPI.dispatch(setAppInitialized({isInitialized: false}))\r\n  try {\r\n    const result = await authApi.me()\r\n    if (result.data.resultCode === 0) {\r\n      thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\r\n    } else {\r\n      return handleAsuncServerAppError(result.data, thunkAPI);\r\n    }\r\n  } catch (error: any) {\r\n    return handleAsuncServerNetworkError(error, thunkAPI);\r\n  }\r\n\r\n});\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n      state.error = action.payload.error;\r\n    },\r\n    setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n      state.status = action.payload.status;\r\n    },\r\n    setAppInitialized(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n      state.isInitialized = action.payload.isInitialized;\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(initializeApp.fulfilled, (state) => {\r\n      state.isInitialized = true;\r\n    });\r\n  },\r\n});\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppError, setAppStatus, setAppInitialized} = slice.actions;\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\n\r\nexport const appActions = {initializeApp, ...slice.actions};\r\n\r\nexport type SetErrorType = ReturnType<typeof setAppError>\r\nexport type SetStatusType = ReturnType<typeof setAppStatus>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';","import {setAppError, setAppStatus} from '../state/reducers/app-reducer';\r\n\r\nimport {CommonResponseType} from '../dal/todolists-api';\r\nimport {AxiosError} from 'axios';\r\n\r\n//BaseThunkAPI<S, E, D, extends Dispatch = Dispatch, Rejected = undefined>\r\ntype ThunkAPIType = {\r\n  dispatch: (action: any) => any,\r\n  rejectWithValue: Function,\r\n};\r\n\r\nexport const handleAsuncServerAppError = <T>(\r\n  data: CommonResponseType<T>,\r\n  thunkAPI: ThunkAPIType, \r\n  showError = true\r\n) => {\r\n  if (showError)\r\n  {\r\n    thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n  }\r\n  thunkAPI.dispatch(setAppStatus({status: 'failed'}));\r\n  return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsError})\r\n};\r\n\r\nexport const handleAsuncServerNetworkError = (\r\n  error: AxiosError,\r\n  thunkAPI: ThunkAPIType, \r\n  showError = true\r\n) => {\r\n  if (showError)\r\n  {\r\n    thunkAPI.dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}));\r\n  }\r\n  thunkAPI.dispatch(setAppStatus({status: 'failed'}));\r\n\r\n  return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType, todolistApi} from '../../dal/todolists-api';\r\n\r\nimport {setAppStatus} from './app-reducer';\r\nimport {todolistsActions} from './todolist-reducer';\r\n\r\nimport {AppRootStateType, ThunkError} from '../types';\r\nimport {handleAsuncServerNetworkError, handleAsuncServerAppError} from \"../../utils/error-utils\";\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk<{ todolistId: string, tasks: TaskType[] },\r\n    string,\r\n    ThunkError>('task/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await todolistApi.getTasks(todolistId);\r\n        const tasks = res.data.items;\r\n        return {todolistId, tasks};\r\n    } catch (error: any) {\r\n        return handleAsuncServerNetworkError(error, thunkAPI);\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    }\r\n});\r\nexport const deletTask = createAsyncThunk<{ todolistId: string, id: string },\r\n    { todolistId: string, id: string },\r\n    ThunkError>('task/deletTask', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        await todolistApi.deletTask(param.todolistId, param.id);\r\n        return {todolistId: param.todolistId, id: param.id};\r\n    } catch (error: any) {\r\n        return handleAsuncServerNetworkError(error, thunkAPI);\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    }\r\n\r\n});\r\nexport const addTask = createAsyncThunk<TaskType,\r\n    { todolistId: string, title: string },\r\n    ThunkError>('task/addTask', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const result = await todolistApi.addTask(param.todolistId, param.title);\r\n        if (result.data.resultCode === 0) {\r\n            return result.data.data.item\r\n        } else {\r\n            return handleAsuncServerAppError(result.data, thunkAPI, false);\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsuncServerNetworkError(error, thunkAPI, false);\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    }\r\n\r\n});\r\nexport const updateTask = createAsyncThunk<{ todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType },\r\n    { todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType },\r\n    ThunkError>('task/updateTask', async (\r\n    param: { todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType },\r\n    thunkAPI) => {\r\n\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let state = thunkAPI.getState() as AppRootStateType;\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\r\n        if (!task) {\r\n            return thunkAPI.rejectWithValue({errors: ['task no found in the state']});\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...param.domainModel\r\n        };\r\n        const result = await todolistApi.updateTask(param.todolistId, param.taskId, apiModel);\r\n        if (result.data.resultCode === 0) {\r\n            return param;\r\n        } else {\r\n            return handleAsuncServerAppError(result.data, thunkAPI)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsuncServerNetworkError(error, thunkAPI);\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    }\r\n});\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'task',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(todolistsActions.addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        })\r\n            .addCase(todolistsActions.fetchTodolist.fulfilled, (state, action) => {\r\n                action.payload.forEach((todolist: any) => {\r\n                    state[todolist.id] = [];\r\n                });\r\n            })\r\n            .addCase(todolistsActions.removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.id];\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    state[action.payload.todolistId] = action.payload.tasks;\r\n                }\r\n            })\r\n            .addCase(deletTask.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    const tasks = state[action.payload.todolistId];\r\n                    const index = tasks.findIndex(task => task.id === action.payload?.id);\r\n                    if (index > -1) {\r\n                        tasks.splice(index, 1);\r\n                    }\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload);\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(task => task.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel};\r\n                }\r\n            })\r\n    },\r\n});\r\n\r\nexport const taskReducer = slice.reducer;\r\n\r\nexport const selectTask = (state: AppRootStateType) => state.tasks;\r\n\r\nexport const tasksActions = {updateTask, addTask, fetchTasks, deletTask}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n};\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n};\r\n","import {createSlice, PayloadAction, createAsyncThunk} from '@reduxjs/toolkit';\r\n\r\nimport {RequestStatusType, todolistApi, TodolistType} from '../../dal/todolists-api';\r\nimport {handleAsuncServerNetworkError, handleAsuncServerAppError} from \"../../utils/error-utils\";\r\n\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {tasksActions} from './task-reducer';\r\nimport {AppRootStateType, ThunkError} from '../types';\r\n\r\nexport const fetchTodolist = createAsyncThunk<\r\n    TodolistType[],\r\n    undefined,\r\n    ThunkError\r\n>('todolists/fetchTodolist', async (param, thunkAPI) => {\r\n    try\r\n    {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n        const res = await todolistApi.getTodo();\r\n        res.data.forEach(tl => thunkAPI.dispatch(tasksActions.fetchTasks(tl.id)));\r\n        return res.data;\r\n    } catch (error: any)\r\n    {\r\n        return handleAsuncServerNetworkError(error, thunkAPI);\r\n    } finally\r\n    {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n    }\r\n});\r\nexport const removeTodolist = createAsyncThunk<\r\n    {id: string},\r\n    {todoListId: string},\r\n    ThunkError\r\n>('todolists/removeTodolist', async (param: {todoListId: string}, thunkAPI) => {\r\n    try\r\n    {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n        thunkAPI.dispatch(changeTodolistEntityStatus({id: param.todoListId, status: 'loading'}));\r\n        await todolistApi.deletTodo(param.todoListId);\r\n        return {id: param.todoListId};\r\n    } catch (error: any)\r\n    {\r\n        return handleAsuncServerNetworkError(error, thunkAPI);\r\n    } finally\r\n    {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n    }\r\n});\r\nexport const changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (param: {todolistId: string, title: string}, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n        try\r\n        {\r\n            const result = await todolistApi.updateTodo(param.todolistId, param.title);\r\n            if (result.data.resultCode === 0)\r\n            {\r\n                return {id: param.todolistId, title: param.title};\r\n            } else\r\n            {\r\n                return handleAsuncServerAppError(result.data, thunkAPI)\r\n            }\r\n        } catch (error: any)\r\n        {\r\n            return handleAsuncServerNetworkError(error, thunkAPI);\r\n        } finally\r\n        {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n        }\r\n    });\r\nexport const addTodolist = createAsyncThunk<\r\n    {todolist: TodolistType},\r\n    {title: string},\r\n    ThunkError\r\n>('todolists/addTodolist', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try\r\n    {\r\n        const result = await todolistApi.createTodo(param.title);\r\n        if (result.data.resultCode === 0)\r\n        {\r\n            return {todolist: result.data.data.item};\r\n        } else\r\n        {\r\n            return handleAsuncServerAppError(result.data, thunkAPI, false)\r\n        }\r\n    } catch (error: any)\r\n    {\r\n        return handleAsuncServerNetworkError(error, thunkAPI);\r\n    } finally\r\n    {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n    }\r\n});\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as TodolistDomainType[],\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.id)\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolist.fulfilled, (state, action) => {\r\n            return action.payload.map(todolist => ({...todolist, filter: 'all', entityStatus: 'idle'}));\r\n        })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todolist => todolist.id === action.payload.id);\r\n                if (index > -1)\r\n                {\r\n                    state.splice(index, 1);\r\n                }\r\n            })\r\n            .addCase(addTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'});\r\n            })\r\n            .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todolist => todolist.id === action.payload.id)\r\n                state[index].title = action.payload.title;\r\n            })\r\n\r\n    },\r\n});\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions;\r\n\r\nexport const selectTodolsts = (state: AppRootStateType) => state.todolist;\r\n\r\nexport const todolistsActions = {addTodolist, changeTodolistTitle, removeTodolist, fetchTodolist, ...slice.actions}\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType,\r\n};\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {todolistReducer} from './reducers/todolist-reducer';\r\nimport {taskReducer} from './reducers/task-reducer';\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {authReducer} from \"./reducers/auth-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n  todolist: todolistReducer,\r\n  tasks: taskReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n});","import thunk from \"redux-thunk\";\r\nimport {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\r\nimport {rootReducer} from \"./reducers\";\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n});\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot)\r\n{\r\n    module.hot.accept('./reducers', () => {\r\n        store.replaceReducer(rootReducer);\r\n    })\r\n   \r\n}","import React, {ChangeEvent, useCallback, useState, KeyboardEvent} from \"react\";\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ControlPoint from \"@mui/icons-material/ControlPoint\";\r\n\r\nexport type AddItemFromSubmitHelperType = {\r\n    setError: (error: string) => void,\r\n    setTitle: (title: string) => void,\r\n};\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (param: {title: string}, helper: AddItemFromSubmitHelperType) => void,\r\n    disabled?: boolean,\r\n};\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(props => {\r\n    const {addItem, disabled, } = props;\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeNewTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    const addNewItem = useCallback( () => {\r\n        if (title.trim() !== '')\r\n        {\r\n            addItem({title: title.trim()}, {setError, setTitle});\r\n\r\n        } else\r\n        {\r\n            setError('Title is requared')\r\n        }\r\n    }, [addItem, title]);\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null)\r\n        {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter')\r\n        {\r\n            addNewItem();\r\n        }\r\n    };\r\n\r\n    const blurHandler = useCallback(() => setError(null), []); // проследить по перерисовке;\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeNewTaskTitle}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label=\"Type value\"\r\n                variant={'outlined'}\r\n                helperText={error}\r\n                onBlur={blurHandler}\r\n                disabled={disabled}\r\n            />\r\n\r\n            <IconButton\r\n                onClick={addNewItem}\r\n                color={'primary'}\r\n                onBlur={blurHandler}\r\n                disabled={disabled}\r\n                style={{marginLeft: '5px'}}\r\n            >\r\n                <ControlPoint />\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n});","import React, { ChangeEvent, useCallback, useState } from \"react\";\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditabelSpanPropsType = {\r\n  title: string\r\n  onChange: (newValue: string) => void\r\n};\r\n\r\nexport const EditableSpan: React.FC<EditabelSpanPropsType> = React.memo(props => {\r\n  const { title, onChange } = props;\r\n\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n  const [newTitle, setNewTitle] = useState<string>('');\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n\r\n  };\r\n  const activateViewMode = useCallback(() => {\r\n    setEditMode(false);\r\n    onChange(newTitle);\r\n    // setNewTitle('');\r\n  }, [onChange, newTitle]);\r\n\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTitle(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    editMode\r\n      ? <TextField value={newTitle} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus variant={'standard'} />\r\n      : <span onDoubleClick={activateEditMode}>{title}</span>\r\n  )\r\n});","import {useDispatch} from \"react-redux\";\r\nimport {AppDispatchType} from \"../state/types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();","import {ActionCreatorsMapObject, bindActionCreators} from \"@reduxjs/toolkit\"\r\nimport {useMemo} from \"react\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\n\r\nexport const useActions = <T extends ActionCreatorsMapObject<any>>(actions: T) => {\r\n  const dispath = useAppDispatch();\r\n\r\n  const boundActions = useMemo(() => {\r\n    return bindActionCreators(actions, dispath)\r\n  }, [actions, dispath]);\r\n\r\n  return boundActions;\r\n};","import React, {ChangeEvent, useCallback} from \"react\";\r\n\r\nimport {TaskStatuses, TaskType} from \"../../../../dal/todolists-api\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan\";\r\n\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {pink} from '@mui/material/colors';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport {useActions} from \"../../../../state/hooks/useActions\";\r\nimport {tasksActions} from \"../../../../state/reducers/task-reducer\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n};\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n    const {task, todolistId} = props\r\n    const {deletTask, updateTask} = useActions(tasksActions);\r\n\r\n    const deletingUnnecessaryTask = useCallback(() => {\r\n        deletTask({todolistId, id: task.id})\r\n    }, [deletTask, task.id, todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        updateTask({\r\n            todolistId,\r\n            taskId: task.id,\r\n            domainModel: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New}\r\n        });\r\n    }, [updateTask, task.id, todolistId]);\r\n\r\n    const onChangeTaskTitle = useCallback((title: string) => {\r\n        updateTask({todolistId, taskId: task.id, domainModel: {title}})\r\n    }, [updateTask, task.id, todolistId]);\r\n\r\n    return (\r\n        <div\r\n            className={task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n            style={{position: 'relative'}}\r\n        >\r\n              <Checkbox\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeHandler}\r\n                    sx={{\r\n                        color: pink[800],\r\n                        '&.Mui-checked': {\r\n                            color: pink[600],\r\n                        },\r\n                    }}/>\r\n                <EditableSpan title={task.title} onChange={onChangeTaskTitle}/>\r\n                <IconButton\r\n                    color={'success'}\r\n                    size=\"small\"\r\n                    onClick={deletingUnnecessaryTask}\r\n                    style={{position: 'absolute', top: '5px', right: '0'}}\r\n                >\r\n                    <DeleteIcon fontSize=\"inherit\"/>\r\n                </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","\r\nexport const someError: string = 'Some error uccured';\r\nexport const emptyString: string = '';\r\nexport const timeProgress: number = 500;\r\n\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './index.css';\r\n\r\nimport {FilterValuesType, TodolistDomainType, todolistsActions} from \"../../../state/reducers/todolist-reducer\";\r\nimport {tasksActions} from '../../../state/reducers/task-reducer';\r\n\r\nimport {AddItemForm, AddItemFromSubmitHelperType} from \"../../../components/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan\";\r\nimport {Task} from \"./Task\";\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nimport {useActions} from '../../../state/hooks/useActions';\r\nimport {TaskStatuses, TaskType} from \"../../../dal/todolists-api\";\r\nimport {useAppDispatch} from '../../../utils/redux-utils';\r\nimport {emptyString, someError} from \"../../../consts\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: TaskType[]\r\n};\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo((props) => {\r\n    const {todolist, tasks,} = props;\r\n    const dispatch = useAppDispatch();\r\n\r\n\r\n    const {changeTodolistTitle, removeTodolist, changeTodolistFilter} = useActions(todolistsActions);\r\n    const {addTask} = useActions(tasksActions);\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeTodolistFilter({id: todolist.id, filter: 'all'})\r\n    }, [changeTodolistFilter, todolist.id]);\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeTodolistFilter({id: todolist.id, filter: 'active'})\r\n    }, [changeTodolistFilter, todolist.id]);\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeTodolistFilter({id: todolist.id, filter: 'completed'})\r\n    }, [changeTodolistFilter, todolist.id]);\r\n\r\n\r\n    const addNewTask = useCallback(async (param: { title: string }, helper: AddItemFromSubmitHelperType) => {\r\n        const resultAction = await dispatch(tasksActions.addTask({todolistId: todolist.id, title: param.title}));\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n\r\n                const errorMessage = resultAction.payload?.errors[0];\r\n                helper.setError(errorMessage);\r\n            } else {\r\n                helper.setError(someError);\r\n            }\r\n        } else {\r\n            helper.setTitle(emptyString)\r\n        }\r\n    }, [dispatch, todolist.id]);\r\n\r\n    const getTasksForTodoList = useCallback(() => {\r\n        switch (todolist.filter) {\r\n            case 'completed':\r\n                return tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'active':\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }, [todolist.filter, tasks]);\r\n\r\n    const replaceNewTitleTodolist = useCallback((newTitle: string) => {\r\n        changeTodolistTitle({todolistId: todolist.id, title: newTitle});\r\n    }, [changeTodolistTitle, todolist.id]);\r\n\r\n    const deleteTodolist = useCallback(() => {\r\n        removeTodolist({todoListId: todolist.id});\r\n    }, [removeTodolist, todolist.id]);\r\n\r\n    let newTasks = getTasksForTodoList();\r\n\r\n    const renderFilterButton = (\r\n        buttonFilter: FilterValuesType,\r\n        onClick: () => void,\r\n        text: string,\r\n        outlined?: boolean\r\n    ) => {\r\n        const additionalOption = outlined ? 'outlined' : 'contained';\r\n        const varian = todolist.filter === buttonFilter ? additionalOption : 'text';\r\n\r\n        return (\r\n            <Button\r\n                variant={varian}\r\n                color={'primary'}\r\n                onClick={onClick}>\r\n                {text}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Paper elevation={3} style={{padding: '10px', position: 'relative', marginBottom: '20px'}}>\r\n            <IconButton\r\n                color={'success'}\r\n                size=\"medium\"\r\n                onClick={deleteTodolist}\r\n                disabled={todolist.entityStatus === 'loading'}\r\n                style={{position: 'absolute', right: '5px', top: '5px'}}\r\n            >\r\n                <DeleteIcon fontSize=\"inherit\"/>\r\n            </IconButton>\r\n            <h3>\r\n                <EditableSpan title={todolist.title} onChange={replaceNewTitleTodolist}/>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addNewTask} disabled={todolist.entityStatus === 'loading'}/>\r\n\r\n            <div>\r\n                {newTasks.map(t => <Task\r\n                    key={t.id} task={t} todolistId={todolist.id}/>)}\r\n                {!newTasks.length && <div className='warningBlock'>No task</div>}\r\n            </div>\r\n\r\n            <div className='block-button'>\r\n                {renderFilterButton('all', onAllClickHandler, 'All', true)}\r\n                {renderFilterButton('active', onActiveClickHandler, 'Active')}\r\n                {renderFilterButton('completed', onCompletedClickHandler, 'Completed')}\r\n            </div>\r\n        </Paper>\r\n    )\r\n});\r\n","import React, {FC, useCallback, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nimport {AddItemForm, AddItemFromSubmitHelperType} from '../../components/AddItemForm';\r\nimport {Todolist} from './Todolist';\r\n\r\nimport {selectTodolsts, TodolistDomainType, todolistsActions} from '../../state/reducers/todolist-reducer';\r\nimport {selectTask} from '../../state/reducers/task-reducer';\r\nimport {selectIsLoggedIn} from '../../state/reducers/auth-reducer';\r\n\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport {useActions} from '../../state/hooks/useActions';\r\nimport {useAppDispatch} from '../../utils/redux-utils';\r\nimport {someError, emptyString} from \"../../consts\";\r\nimport {login} from \"../../endpoints\";\r\n\r\n\r\nexport const TodolistList: FC = () => {\r\n    const dispatch = useAppDispatch();\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n    const todolists: TodolistDomainType[] = useSelector(selectTodolsts);\r\n    const tasks = useSelector(selectTask);\r\n\r\n    const {fetchTodolist} = useActions(todolistsActions);\r\n\r\n    const addTodolistCallback = useCallback(async (param: { title: string }, helper: AddItemFromSubmitHelperType) => {\r\n\r\n        const resultAction = await dispatch(todolistsActions.addTodolist({title: param.title}));\r\n\r\n        if (todolistsActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n\r\n                const errorMessage = resultAction.payload?.errors[0];\r\n                helper.setError(errorMessage);\r\n            } else {\r\n                helper.setError(someError);\r\n            }\r\n        } else {\r\n            helper.setTitle(emptyString);\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (!todolists.length) {\r\n            fetchTodolist();\r\n        }\r\n    }, [todolists, fetchTodolist]);\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={login}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px 0px'}}>\r\n                <AddItemForm addItem={addTodolistCallback}/>\r\n            </Grid>\r\n            <Grid container spacing={7} style={{flexWrap: 'nowrap', overflowX: 'auto', paddingRight: '10px'}}>\r\n                {todolists.length ? todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <div\r\n                                style={{width: '300px'}}\r\n                            >\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    todolist={tl}\r\n                                    tasks={allTodolistTasks}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    )\r\n                }) : <></>}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\n\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\n\r\nimport {appActions} from '../../state/reducers/app-reducer';\r\nimport {AppRootStateType} from '../../state/types';\r\nimport {useActions} from '../../state/hooks/useActions';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref,) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const Snackbars = () => {\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n\r\n  const {setAppError} = useActions(appActions);\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n   setAppError({error: null})\r\n  };\r\n\r\n  const isOpen = error !== null;\r\n\r\n  return (\r\n    <Stack spacing={2} sx={{width: '100%'}}>\r\n      <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n      {/* <Alert severity=\"warning\">This is a warning message!</Alert>\r\n      <Alert severity=\"info\">This is an information message!</Alert>\r\n      <Alert severity=\"success\">This is a success message!</Alert> */}\r\n    </Stack>\r\n  );\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\n\r\nimport {loginUser, selectIsLoggedIn} from '../../../state/reducers/auth-reducer';\r\nimport {useAppDispatch} from '../../../utils/redux-utils';\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\ntype FormValues = {\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n};\r\n\r\nexport const Login: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n  const {handleSubmit, getFieldProps, values, errors, } = useFormik({\r\n    validate: (values) => {\r\n      if (!values.email)\r\n      {\r\n        return {\r\n          email: 'Email is  required'\r\n        }\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          password: 'Password is  required'\r\n        }\r\n      }\r\n      \r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    onSubmit: async (values: FormValues, formikHelpers: FormikHelpers<FormValues>) => {\r\n      const result = await dispatch(loginUser({dataLogin: values}));\r\n      if(loginUser.rejected.match(result)) {\r\n        if(result.payload?.fieldsErrors?.length) {\r\n          const error = result.payload?.fieldsErrors[0];\r\n          formikHelpers.setFieldError(error.field, error.error);\r\n        }\r\n      }\r\n    },\r\n  });\r\n\r\n  if (isLoggedIn){\r\n    return <Navigate to={'/'}/>\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent={'center'}>\r\n      <Grid item justifyContent={'center'}>\r\n        <form onSubmit={handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>To log in get registered\r\n                <a href={'https://social-network.samuraijs.com/'}\r\n                  target={'_blank'}\r\n                  rel=\"noreferrer\"\r\n                > here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...getFieldProps('email')}\r\n              />\r\n              {errors.email ? <div>{errors.email}</div> : null}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...getFieldProps('password')}\r\n              />\r\n              {errors.password ? <div>{errors.password}</div> : null}\r\n              <FormControlLabel label={'Remember me'}\r\n                control={<Checkbox\r\n                  {...getFieldProps('rememberMe')}\r\n                  checked={values.rememberMe}\r\n                />} />\r\n              <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid >\r\n  )\r\n}\r\n","import * as React from 'react';\r\n\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\ntype CircularProgressWithLabelPropsType = {\r\n  value: number\r\n};\r\n\r\nexport const CircularProgressWithLabel: React.FC<CircularProgressWithLabelPropsType> = (props) => {\r\n  const {value = 0} = props\r\n  return (\r\n    <Box sx={{position: 'relative', display: 'inline-flex'}}>\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        sx={{\r\n          top: 0,\r\n          left: 0,\r\n          bottom: 0,\r\n          right: 0,\r\n          position: 'absolute',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n      >\r\n        <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\r\n          {`${ Math.round(value) }%`}\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport {TodolistList} from '../features/Todolists';\r\nimport {Snackbars} from '../components/ErrorSnackbar';\r\nimport {Login} from '../features/Todolists/Login';\r\nimport {CircularProgressWithLabel} from '../features/Progress';\r\n\r\nimport {authActions, selectIsLoggedIn} from '../state/reducers/auth-reducer';\r\nimport {appActions, selectIsInitialized, selectStatus} from '../state/reducers/app-reducer';\r\n\r\nimport {home, login} from \"../endpoints\";\r\nimport {useActions} from '../state/hooks/useActions';\r\nimport {useProgress} from \"../hooks/useProgress\";\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\n\r\nexport const App: React.FC = (): JSX.Element => {\r\n  const status = useSelector(selectStatus);\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n  const isInitialized = useSelector(selectIsInitialized);\r\n  \r\n  const {initializeApp} = useActions(appActions);\r\n  const {logoutUser} = useActions(authActions);\r\n\r\n  const {progress} = useProgress();\r\n\r\n  useEffect(() => {\r\n    if(!isInitialized){\r\n      initializeApp();\r\n     }\r\n  }, [initializeApp, isInitialized]);\r\n\r\n  if (!isInitialized)\r\n  {\r\n    return (\r\n      <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n        <CircularProgressWithLabel value={progress} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Snackbars />\r\n        <Toolbar style={{justifyContent: 'space-between'}}>\r\n          <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            sx={{mr: 2}}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n            Todolist\r\n          </Typography>\r\n          {isLoggedIn && <Button color=\"inherit\" onClick={logoutUser}>Log out</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' ? <LinearProgress /> : <></>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path={home} element={<TodolistList />} />\r\n          <Route path={login} element={<Login />} />\r\n        </Routes>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","import {useEffect, useState} from \"react\";\r\nimport {timeProgress} from \"../consts\";\r\n\r\n\r\nexport const useProgress = () => {\r\n    const [progress, setProgress] = useState(10);\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\r\n        }, timeProgress);\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return {progress}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport {App} from './app/App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nconst rerenderEntireTree = () => {\r\n\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>,\r\n  \r\n    document.getElementById('root')\r\n  );\r\n  \r\n}\r\n\r\n\r\nrerenderEntireTree()\r\n\r\n\r\nif(process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./app/App', () => {\r\n    rerenderEntireTree()\r\n  })\r\n  module.hot.accept('./state/store', () => {\r\n    rerenderEntireTree()\r\n  })\r\n}\r\n"],"sourceRoot":""}